ICan={},function(a,b,c){function d(a){var b=a.attributes,c=e(a);for(var d=0;d<c.length;d+=1)c[d].initialize(a)}function e(a){var b=[],c=null;for(var d in a)c=a[d],c.iCanHasRelation&&(c.name=d,b.push(c));return b}_.extend(ICan,{haveRelationsOn:d,hasMany:function(a){return new ICan.HasManyRelation(a)},belongsTo:function(a){return new ICan.BelongsToRelation("belongs to",a)}})}(jQuery,this,undefined),function(a,b,c){function d(a){return function(b){b[a.name]=c}}function e(a,b){}ICan.HasManyRelation=function(a,c){this.iCanHasRelation=!0,this.klass=b[a],this.on=c},_.extend(ICan.HasManyRelation.prototype,{initialize:function(a){var c=this.model.attributes[this.name],d=new b[this.klass](c);this.model=a,delete this.model.attributes[this.name],this.model[this.name]=d},initializeBelongsTo:function(){this.model[this.name]=c}}),ICan.BelongsToRelation=function(a){}}(jQuery,this,undefined);